{"version":3,"file":"socket.min.js","sources":["../src/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\n\nconst Socket = class {\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    constructor(contextid, token) {\n        this.websocket = new WebSocket('wss://deftly.us/ws');\n        this.listeners = [];\n        this.websocket.onopen = (e) => {\n            this.websocket.send(token);\n            this.listeners.forEach((callback) => {\n                callback(e);\n            });\n        };\n\n        this.websocket.addEventListener('close', (e) => {\n            Log.debug('Disconnected');\n            if (e.code == 1011) {\n                Log.debug('Authentication failed');\n                Ajax.call([{\n                    methodname: 'block_deft_renew_token',\n                    args: {contextid: contextid},\n                    done: (replacement) => {\n                        this.reconnect(contextid, replacement.token);\n                    },\n                    fail: Notification.exception\n                }]);\n            } else {\n                setTimeout(() => {\n                    this.reconnect(contextid, token);\n                }, 5000);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Attempt reconnecting to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     */\n    reconnect(contextid, token) {\n        Log.debug('Reconnecting');\n        this.websocket = new WebSocket('wss://deftly.us/ws');\n        this.open(contextid, token);\n        this.listeners.forEach((callback) => {\n            this.websocket.addEventListener('message', callback);\n        });\n    }\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe(callback) {\n        this.websocket.addEventListener('message', callback);\n        this.listeners.push(callback);\n\n        return this;\n    }\n};\n\nexport default Socket;\n"],"names":["constructor","contextid","token","websocket","WebSocket","listeners","onopen","e","send","forEach","callback","addEventListener","debug","code","call","methodname","args","done","replacement","reconnect","fail","Notification","exception","setTimeout","this","open","subscribe","push"],"mappings":";;;;;;;;4NAce,MASXA,YAAYC,UAAWC,mBACdC,UAAY,IAAIC,UAAU,2BAC1BC,UAAY,QACZF,UAAUG,OAAUC,SAChBJ,UAAUK,KAAKN,YACfG,UAAUI,SAASC,WACpBA,SAASH,YAIZJ,UAAUQ,iBAAiB,SAAUJ,iBAClCK,MAAM,gBACI,MAAVL,EAAEM,mBACED,MAAM,uCACLE,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAACf,UAAWA,WAClBgB,KAAOC,mBACEC,UAAUlB,UAAWiB,YAAYhB,QAE1CkB,KAAMC,sBAAaC,cAGvBC,YAAW,UACFJ,UAAUlB,UAAWC,SAC3B,QAIJsB,KASXL,UAAUlB,UAAWC,oBACbU,MAAM,qBACLT,UAAY,IAAIC,UAAU,2BAC1BqB,KAAKxB,UAAWC,YAChBG,UAAUI,SAASC,gBACfP,UAAUQ,iBAAiB,UAAWD,aAWnDgB,UAAUhB,sBACDP,UAAUQ,iBAAiB,UAAWD,eACtCL,UAAUsB,KAAKjB,UAEbc"}