{"version":3,"file":"socket.min.js","sources":["../src/socket.js"],"sourcesContent":["/*\n * Open and maintain a WebSocket to recieve messages from server.\n *\n * @package    block_deft\n * @module     block_deft/socket\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nvar websocket = new WebSocket('wss://deftly.us/ws'),\n    listeners = [];\n\nexport default {\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     * @returns {object}\n     * @chainable\n     */\n    open: function(contextid, token) {\n        websocket.onopen = () => websocket.send(token);\n\n        websocket.addEventListener('close', (e) => {\n            Log.debug('Disconnected');\n            if (e.code == 1011) {\n                Log.debug('Authentication failed');\n                Ajax.call([{\n                    methodname: 'block_deft_renew_token',\n                    args: {contextid: contextid},\n                    done: (replacement) => {\n                        this.reconnect(contextid, replacement.token);\n                    },\n                    fail: Notification.exception\n                }]);\n            } else {\n                setTimeout(() => {\n                    this.reconnect(contextid, token);\n                }, 5000);\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Attempt reconnecting to service\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} token Authentication token to connect service\n     */\n    reconnect: function(contextid, token) {\n        Log.debug('Reconnecting');\n        websocket = new WebSocket('wss://deftly.us/ws');\n        this.open(contextid, token);\n        listeners.forEach((callback) => {\n            websocket.addEventListener('message', callback);\n        });\n    },\n\n    /**\n     * Subscribe listener\n     *\n     * @param {function} callback\n     * @returns {object}\n     * @chainable\n     */\n    subscribe: function(callback) {\n        websocket.addEventListener('message', callback);\n        listeners.push(callback);\n\n        return this;\n    }\n};\n"],"names":["websocket","WebSocket","listeners","open","contextid","token","onopen","send","addEventListener","e","debug","code","call","methodname","args","done","replacement","_this","reconnect","fail","Notification","exception","setTimeout","this","forEach","callback","subscribe","push"],"mappings":";;;;;;;;mNAaIA,UAAY,IAAIC,UAAU,sBAC1BC,UAAY,YAED,CASXC,KAAM,SAASC,UAAWC,6BACtBL,UAAUM,OAAS,kBAAMN,UAAUO,KAAKF,QAExCL,UAAUQ,iBAAiB,SAAS,SAACC,gBAC7BC,MAAM,gBACI,MAAVD,EAAEE,mBACED,MAAM,uCACLE,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CAACV,UAAWA,WAClBW,KAAM,SAACC,aACHC,MAAKC,UAAUd,UAAWY,YAAYX,QAE1Cc,KAAMC,sBAAaC,cAGvBC,YAAW,WACPL,MAAKC,UAAUd,UAAWC,SAC3B,QAIJkB,MASXL,UAAW,SAASd,UAAWC,oBACvBK,MAAM,gBACVV,UAAY,IAAIC,UAAU,2BACrBE,KAAKC,UAAWC,OACrBH,UAAUsB,SAAQ,SAACC,UACfzB,UAAUQ,iBAAiB,UAAWiB,cAW9CC,UAAW,SAASD,iBAChBzB,UAAUQ,iBAAiB,UAAWiB,UACtCvB,UAAUyB,KAAKF,UAERF"}