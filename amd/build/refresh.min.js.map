{"version":3,"file":"refresh.min.js","sources":["../src/refresh.js"],"sourcesContent":["/*\n * Refresh content when changed on the system\n *\n * @package    block_deft\n * @module     block_deft/refresh\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from \"core/fragment\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport Socket from \"block_deft/socket\";\nimport Templates from \"core/templates\";\n\nexport default {\n\n    throttled: false,\n\n    lastupdate: 0,\n\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {string} token Authentication token to connect service\n     * @param {int} throttle Throttle dely in ms\n     */\n    init: function(contextid, selector, token, throttle) {\n        Socket.open(contextid, token).subscribe(() => {\n            this.refresh(contextid, selector, throttle);\n        });\n    },\n\n    /**\n     * Refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {int} throttle Throttle dely in ms\n     */\n    refresh: function(contextid, selector, throttle) {\n        let content = document.querySelector(selector).parentNode,\n            data = {};\n        if (!content)  {\n            return;\n        }\n\n        if (this.lastupdate + throttle > Date.now()) {\n            if (!this.throttled) {\n                setTimeout(() => {\n                    this.refresh(contextid, selector, throttle);\n                }, this.lastupdate + throttle - Date.now());\n                this.throttled = true;\n            }\n\n            return;\n        }\n\n        document.querySelector(selector)\n            .querySelectorAll('a.comment-link[aria-expanded=\"true\"]')\n            .forEach((opencomments) => {\n                data.opencomments = data.opencomments || [];\n                data.opencomments.push(opencomments.closest('[data-task]').getAttribute('data-task'));\n            });\n\n        Log.debug(data);\n        Fragment.loadFragment(\n            'block_deft',\n            'content',\n            contextid,\n            {\n                jsondata: JSON.stringify(data)\n            }\n        ).done(\n            Templates.replaceNodeContents.bind(Templates, content)\n        ).fail(Notification.exception);\n\n        this.throttled = false;\n        this.lastupdate = Date.now();\n    }\n};\n"],"names":["throttled","lastupdate","init","contextid","selector","token","throttle","open","subscribe","refresh","content","document","querySelector","parentNode","data","this","Date","now","setTimeout","querySelectorAll","forEach","opencomments","push","closest","getAttribute","debug","loadFragment","jsondata","JSON","stringify","done","Templates","replaceNodeContents","bind","fail","Notification","exception"],"mappings":";;;;;;;;0TAee,CAEXA,WAAW,EAEXC,WAAY,EAUZC,KAAM,SAASC,UAAWC,SAAUC,MAAOC,0BAChCC,KAAKJ,UAAWE,OAAOG,WAAU,UAC/BC,QAAQN,UAAWC,SAAUE,cAW1CG,QAAS,SAASN,UAAWC,SAAUE,cAC/BI,QAAUC,SAASC,cAAcR,UAAUS,WAC3CC,KAAO,GACNJ,UAIDK,KAAKd,WAAaK,SAAWU,KAAKC,MAC7BF,KAAKf,YACNkB,YAAW,UACFT,QAAQN,UAAWC,SAAUE,YACnCS,KAAKd,WAAaK,SAAWU,KAAKC,YAChCjB,WAAY,IAMzBW,SAASC,cAAcR,UAClBe,iBAAiB,wCACjBC,SAASC,eACNP,KAAKO,aAAeP,KAAKO,cAAgB,GACzCP,KAAKO,aAAaC,KAAKD,aAAaE,QAAQ,eAAeC,aAAa,8BAG5EC,MAAMX,wBACDY,aACL,aACA,UACAvB,UACA,CACIwB,SAAUC,KAAKC,UAAUf,QAE/BgB,KACEC,mBAAUC,oBAAoBC,KAAKF,mBAAWrB,UAChDwB,KAAKC,sBAAaC,gBAEfpC,WAAY,OACZC,WAAae,KAAKC"}