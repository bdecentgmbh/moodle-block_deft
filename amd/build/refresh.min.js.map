{"version":3,"file":"refresh.min.js","sources":["../src/refresh.js"],"sourcesContent":["/*\n * Refresh content when changed on the system\n *\n * @package    block_deft\n * @module     block_deft/refresh\n * @copyright  2022 Daniel Thies <dethies@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from \"core/fragment\";\nimport Log from \"core/log\";\nimport Socket from \"block_deft/socket\";\nimport Templates from \"core/templates\";\n\nexport default {\n\n    throttled: false,\n\n    lastupdate: 0,\n\n    /**\n     * Listen to WebSocket and refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {string} token Authentication token to connect service\n     * @param {int} throttle Throttle dely in ms\n     */\n    init: function(contextid, selector, token, throttle) {\n        Socket.open(contextid, token).subscribe(() => {\n            this.refresh(contextid, selector, throttle);\n        });\n    },\n\n    /**\n     * Refresh content\n     *\n     * @param {int} contextid Context id of block\n     * @param {string} selector Content location to replace\n     * @param {int} throttle Throttle dely in ms\n     */\n    refresh: function(contextid, selector, throttle) {\n        let content = document.querySelector(selector).parentNode,\n            comments = false,\n            component = content.closest('[data-component]')\n                && content.closest('[data-component]').getAttribute('data-component')\n                || 'block_deft',\n            data = {};\n        if (!content) {\n            return;\n        }\n        content.querySelectorAll('.block_deft_comments textarea').forEach((textarea) => {\n            if (\n                textarea.value != textarea.getAttribute('aria-label')\n                || !textarea.value\n            ) {\n                // User is writing a comment.\n                comments = true;\n            }\n        });\n\n        if (\n            comments\n            || (this.lastupdate + throttle > Date.now())\n            || (document.activeElement.closest(selector) && document.activeElement.closest('select'))\n        ) {\n            if (\n                !this.throttled\n                || (this.lastupdate + throttle < Date.now())\n            ) {\n                setTimeout(() => {\n                    this.refresh(contextid, selector, throttle);\n                }, Math.max(this.lastupdate + throttle - Date.now(), 40));\n                this.throttled = true;\n            }\n\n            return;\n        }\n\n        document.querySelector(selector)\n            .querySelectorAll('a.comment-link[aria-expanded=\"true\"]')\n            .forEach((opencomments) => {\n                data.opencomments = data.opencomments || [];\n                data.opencomments.push(opencomments.closest('[data-task]').getAttribute('data-task'));\n            });\n\n        Fragment.loadFragment(\n            component,\n            'content',\n            contextid,\n            {\n                jsondata: JSON.stringify(data)\n            }\n        ).done((html, js) => {\n            content.querySelectorAll('[data-summary]').forEach((summary) => {\n                const height = summary.offsetHeight,\n                    task = summary.getAttribute('data-summary');\n                setTimeout(() => {\n                    content.querySelectorAll('[data-summary=\"' + task + '\"]').forEach((summary) => {\n                        summary.setAttribute('style', 'min-height: ' + height + 'px;');\n                    });\n                });\n            });\n            Templates.replaceNodeContents(content, html, js);\n        }).catch(Log.debug);\n\n        this.throttled = false;\n        this.lastupdate = Date.now();\n    }\n};\n"],"names":["throttled","lastupdate","init","contextid","selector","token","throttle","open","subscribe","refresh","content","document","querySelector","parentNode","comments","component","closest","getAttribute","data","querySelectorAll","forEach","textarea","value","this","Date","now","activeElement","setTimeout","Math","max","opencomments","push","loadFragment","jsondata","JSON","stringify","done","html","js","summary","height","offsetHeight","task","setAttribute","replaceNodeContents","catch","Log","debug"],"mappings":";;;;;;;;sQAce,CAEXA,WAAW,EAEXC,WAAY,EAUZC,KAAM,SAASC,UAAWC,SAAUC,MAAOC,0BAChCC,KAAKJ,UAAWE,OAAOG,WAAU,UAC/BC,QAAQN,UAAWC,SAAUE,cAW1CG,QAAS,SAASN,UAAWC,SAAUE,cAC/BI,QAAUC,SAASC,cAAcR,UAAUS,WAC3CC,UAAW,EACXC,UAAYL,QAAQM,QAAQ,qBACrBN,QAAQM,QAAQ,oBAAoBC,aAAa,mBACjD,aACPC,KAAO,GACNR,UAGLA,QAAQS,iBAAiB,iCAAiCC,SAASC,WAE3DA,SAASC,OAASD,SAASJ,aAAa,eACpCI,SAASC,QAGbR,UAAW,MAKfA,UACIS,KAAKtB,WAAaK,SAAWkB,KAAKC,OAClCd,SAASe,cAAcV,QAAQZ,WAAaO,SAASe,cAAcV,QAAQ,YAG1EO,KAAKvB,WACFuB,KAAKtB,WAAaK,SAAWkB,KAAKC,SAEtCE,YAAW,UACFlB,QAAQN,UAAWC,SAAUE,YACnCsB,KAAKC,IAAIN,KAAKtB,WAAaK,SAAWkB,KAAKC,MAAO,UAChDzB,WAAY,IAMzBW,SAASC,cAAcR,UAClBe,iBAAiB,wCACjBC,SAASU,eACNZ,KAAKY,aAAeZ,KAAKY,cAAgB,GACzCZ,KAAKY,aAAaC,KAAKD,aAAad,QAAQ,eAAeC,aAAa,mCAGvEe,aACLjB,UACA,UACAZ,UACA,CACI8B,SAAUC,KAAKC,UAAUjB,QAE/BkB,MAAK,CAACC,KAAMC,MACV5B,QAAQS,iBAAiB,kBAAkBC,SAASmB,gBAC1CC,OAASD,QAAQE,aACnBC,KAAOH,QAAQtB,aAAa,gBAChCU,YAAW,KACPjB,QAAQS,iBAAiB,kBAAoBuB,KAAO,MAAMtB,SAASmB,UAC/DA,QAAQI,aAAa,QAAS,eAAiBH,OAAS,mCAI1DI,oBAAoBlC,QAAS2B,KAAMC,OAC9CO,MAAMC,aAAIC,YAER/C,WAAY,OACZC,WAAauB,KAAKC"}